plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    // 第一类：第三方字节码依赖（内嵌多架构 native 库）
    implementation 'org.xerial.snappy:snappy-java:1.1.10.5'  // 新版本，支持 x86_64 和 aarch64
    implementation 'org.apache.commons:commons-crypto:1.2.0'  // 支持多架构的版本
    implementation 'net.java.dev.jna:jna:5.14.0'  // 新版本，支持多架构
    implementation 'net.java.dev.jna:jna-platform:5.14.0'
    
    // 第二类：第三方 Native 库依赖（JAR 中包含 .so 文件）
    implementation 'org.rocksdb:rocksdbjni:8.11.4'  // 新版本，包含多架构的 .so 文件
    
    // 日志和工具类
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.12'
    
    // 测试依赖
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
}

// 设置主类
mainClassName = 'com.example.demo.NativeDemoApplication'

// 自定义任务：清理 native libraries
task cleanNativeLibs(type: Exec) {
    description = 'Clean native C/C++ build artifacts'
    workingDir = file('native')
    commandLine 'make', 'clean'
}

// 自定义任务：编译 native libraries（多架构支持）
task compileNativeLibs(type: Exec) {
    description = 'Compile native C/C++ libraries for current and cross architecture'
    workingDir = file('native')
    
    // 输入：源文件
    inputs.files fileTree('native/src')
    inputs.file 'native/Makefile'
    
    // 输出：构建的库文件
    outputs.dir 'native/build'
    
    // 只有在输入文件变化时才重新编译
    commandLine 'make', 'multiarch'
    
    doFirst {
        // 确保构建目录存在
        file('native/build').mkdirs()
    }
}

// 自定义任务：复制 native libraries 到 resources（多架构）
task copyNativeLibs(type: Copy, dependsOn: compileNativeLibs) {
    description = 'Copy compiled native libraries to resources (multi-arch)'
    from 'native/build'
    into 'src/main/resources/native'
    include '*.so'
    
    doFirst {
        // 确保目标目录存在
        file('src/main/resources/native').mkdirs()
    }
}

// 确保在编译 Java 代码前先编译 native libraries
compileJava.dependsOn copyNativeLibs

// 确保 clean 任务也清理 native libraries
clean.dependsOn cleanNativeLibs

// 打包时包含 native libraries
jar {
    from('src/main/resources/native') {
        into 'native'
    }
    
    manifest {
        attributes(
            'Main-Class': 'com.example.demo.NativeDemoApplication',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}

// 创建 fat jar
task fatJar(type: Jar) {
    classifier = 'all'
    duplicatesStrategy = 'exclude'
    
    manifest {
        attributes 'Main-Class': 'com.example.demo.NativeDemoApplication'
    }
    
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    with jar
}

build.dependsOn fatJar
